;;; init.el --- TioT2 Emacs configuration main file -*- lexical-binding: t; -*-

;;; Configure EMACS itself

;; Make 'custom-*' autogenerated fields to go to special file, load them
(custom-set-variables '(custom-file (concat user-emacs-directory "custom.el")))
(when (file-exists-p custom-file)
  (load custom-file))

;; Disable top menus and scroll bars
(menu-bar-mode -1)
(tool-bar-mode -1)

;; Disable scroll bars
(customize-set-variable 'scroll-bar-mode nil)
(customize-set-variable 'horizontal-scroll-bar-mode nil)

;; Disable Emacs backup files
(custom-set-variables '(make-backup-files nil))

;; Decrease font size
(set-face-attribute 'default nil :height 90)

;; Set editing parameters
(setq-default
              ;; Set margin for scrolling
              scroll-margin 3

              ;; Disable scroll 'jumping'
              scroll-conservatively 101

              ;; Indent by spaces (instead of tabs)
              indent-tabs-mode nil

              ;; Set default indent width to 4
              tab-width 4

              ;; Set default value to basic offset for C language
              c-basic-offset 4)

;;; Configure packages

;; Built-in package manager itself (just for configuration)
(use-package package
  :config

  ;; Add package archives (org, melpa, melpa-stable)
  (add-to-list 'package-archives '("org"          . "https://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("melpa"        . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)

  ;; Prioritize stability over recency for packages
  (custom-set-variables
   '(package-archive-priorities
     '(("gnu"          . 50)
       ("nongnu"       . 40)
       ("melpa-stable" . 30)
       ("melpa"        . 20)
       ("org"          . 10)))))

;; Make evil-collection package happy
(custom-set-variables '(evil-want-keybinding nil))

;; EVIL (Extensible VI Layer, e.g. vim keybindings)
(use-package evil
  :ensure t
  :config
  (evil-mode t)

  ;; Remap ':q' and ':wq' commands to not terminate Emacs instance
  (evil-ex-define-cmd "q" 'kill-current-buffer)
  (evil-ex-define-cmd "wq" (lambda ()
                             (interactive)
                             (save-buffer)
                             (kill-current-buffer)))

  ;; Set vi-style search module
  (evil-select-search-module 'evil-search-module 'evil-search))

;; EVIL comment utilities
(use-package evil-commentary
  :ensure t
  :after evil
  :config
  (evil-commentary-mode))

;; EVIL-flavoured keymaps for Magit, Corfu, etc.
(use-package evil-collection
  :ensure t
  :after evil
  :config
  ;; Enable EVIL mode flavoured bindings for specific modes only
  ;; => save traditional (**documented**) key bindings for everything else
  (custom-set-variables `(evil-collection-mode-list '(corfu dired)))
  (evil-collection-init))

;; Magit (git interface)
(use-package magit
  :ensure t)

;; Org mode
(use-package org
  :ensure t)

;; Package for CommonLisp development
(use-package sly
  :ensure t
  :config
  (add-hook 'lisp-mode-hook (lambda () (sly-mode t)))
  (setq inferior-lisp-program "sbcl")
  (sly-setup))

;; Autocomplete package
(use-package corfu
  :ensure t
  :config
  (global-corfu-mode)

  ;; Configurate corfu
  (custom-set-variables
   '(corfu-auto t)
   '(corfu-auto-delay 0)
   '(corfu-auto-prefix 0)
   '(corfu-quit-no-match nil)))

;; Rust-specific package
(use-package rust-mode
  :ensure t)

;; Haskell-specific package
(use-package haskell-mode
  :ensure t)

;; HELM (package that **significantly** improves searching-related experience)
(use-package helm
  :ensure t
  :config
  (helm-mode t)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (custom-set-variables
   '(helm-completion-style 'helm-fuzzy)
    ;; Disable strange helm navigation sh*t
   '(helm-move-to-line-cycle-in-source nil)))

;; Tree sidebar (replace?)
(use-package treemacs
  :ensure t
  :config
  (treemacs-resize-icons 14))

;; EVIL compatibility layer for 'treemacs'
(use-package treemacs-evil
  :ensure t
  :after treemacs evil)

;; EGLOT (Emacs polyGLOT, EMACS LSP client) package
(use-package eglot
  :ensure t
  :config

  ;; Bridge 'haskell-mode' and 'eglot'
  (add-to-list 'eglot-server-programs '(haskell-mode . ("haskell-language-server-wrapper" "--lsp")))

  ;; Configure C-like languages
  (add-hook 'c-mode-common-hook
   (lambda ()
     "C/C++/... language common hook"
     (electric-pair-mode)
     (eglot-ensure)
     ;; Disable autoformat
     ;; (add-to-list 'eglot-ignored-server-capabilities :documentFormattingProvider)
     (add-to-list 'eglot-ignored-server-capabilities :documentOnTypeFormattingProvider)
     (add-to-list 'eglot-ignored-server-capabilities :inlayHintProvider)))

  ;; Configure Rust language
  (add-hook 'rust-mode-hook
   (lambda ()
     "Rust language hook"
     (electric-pair-mode)
     (eglot-ensure)
     ;; Disable auto-formatting and inlay hints
     (add-to-list 'eglot-ignored-server-capabilities :documentOnTypeFormattingProvider)
     (add-to-list 'eglot-ignored-server-capabilities :inlayHintProvider)))

  ;; Configure Haskell language
  (add-hook 'haskell-mode-hook
   (lambda ()
     "Haskell language hook"
     (add-to-list 'eglot-ignored-server-capabilities :inlayHintProvider)
     (eglot-ensure))))

;;; init.el ends here
