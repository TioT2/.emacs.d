;; init.el --- TioT2 Emacs configuration main file -*- lexical-binding: t; -*-

;;; Configure EMACS itself

;; Make 'custom-*' autogenerated fields to go to special file, load them
(custom-set-variables '(custom-file (concat user-emacs-directory "custom.el")))
(when (file-exists-p custom-file)
  (load custom-file))

;; Disable top menus and scroll bars
(menu-bar-mode -1)
(tool-bar-mode -1)

;; Disable scroll bars
(customize-set-variable 'scroll-bar-mode nil)
(customize-set-variable 'horizontal-scroll-bar-mode nil)

;; Disable Emacs backup files
(custom-set-variables '(make-backup-files nil))

;; Decrease font size
(set-face-attribute 'default nil :height 90)

;; Indent by spaces (instead of tabs)
(setq-default indent-tabs-mode nil)

;; Set default indent width to 4
(setq-default tab-width 4)

;; Set default value to basic offset for C language
(setq-default c-basic-offset tab-width)

;;; Configure packages

;; Add package source repositories
(use-package package
  :config

  ;; Add package archives (org, melpa, melpa-stable)
  (add-to-list 'package-archives '("org"          . "https://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("melpa"        . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)

  ;; Prioritize stability over recency for packages
  (custom-set-variables
   '(package-archive-priorities
     '(("gnu"          . 50)
       ("nongnu"       . 40)
       ("melpa-stable" . 30)
       ("melpa"        . 20)
       ("org"          . 10)))))

;; Make evil-collection package happy
(custom-set-variables '(evil-want-keybinding nil))

;; Install EVIL (Extensible VI Layer) package
(use-package evil
  :ensure t
  :config
  (evil-mode t)

  ;; Remap ':q' and ':wq' commands to not terminate Emacs instance
  (evil-ex-define-cmd "q" 'kill-current-buffer)
  (evil-ex-define-cmd "wq" (lambda ()
                             (interactive)
                             (save-buffer)
                             (kill-current-buffer)))

  ;; Set vi-style search module
  (evil-select-search-module 'evil-search-module 'evil-search))

;; Install commenting utilities for to EVIL mode
(use-package evil-commentary
  :ensure t
  :after evil
  :config
  (evil-commentary-mode))

;; Install package that enables EVIL-flavoured keymaps for Magit, Corfu, etc.
(use-package evil-collection
  :ensure t
  :after evil
  :config
  ;; Enable EVIL mode flavoured bindings for specific modes only
  ;; => save traditional (**documented**) key bindings for everything else
  (custom-set-variables `(evil-collection-mode-list '(corfu dired slime)))
  (evil-collection-init))

;; Install Magit
(use-package magit
  :ensure t)

;; Install main package of Org mode
(use-package org
  :ensure t)

;; Install package for CommonLisp development (SLIME) and setup it
(use-package slime
  :ensure t
  :config

  ;; Enable SLIME in lisp-mode
  (add-hook 'lisp-mode-hook (lambda () (slime-mode t)))
  (add-hook 'inferior-lisp-mode-hook (lambda () (inferior-slime-mode t)))

  ;; Enable SLIME extensions
  (slime-setup '(slime-fancy slime-quicklisp slime-asdf slime-mrepl))

  ;; Set installed CL implementations
  (setq slime-lisp-implementations
        '((sbcl ("sbcl")))))

;; Configure rust-specific extension
(use-package rust-mode
  :ensure t
  :config
  ;; Enable native treesitter (?)
  ;; (custom-set-variables '(rust-mode-treesitter-derive t))
  )

;; Install HELM for better search
(use-package helm
  :ensure t
  :config
  (helm-mode t)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (custom-set-variables
   '(helm-completion-style 'helm-fuzzy)
    ;; Disable strange helm navigation sh*t
   '(helm-move-to-line-cycle-in-source nil)))

;; Install autocomplete package (CORFU for now)
(use-package corfu
  :ensure t
  :config
  (global-corfu-mode)
  (custom-set-variables '(corfu-auto t)))

;; Install file tree sidebar package
(use-package treemacs
  :ensure t
  :config
  (treemacs-resize-icons 14))

;; Install evil mode for it
(use-package treemacs-evil
  :ensure t
  :after treemacs evil)

(defun language-hook-c ()
  "Hook on C/C++ language"
  (eglot-ensure)
  ;; Disable autoformat
  ;; (add-to-list 'eglot-ignored-server-capabilities :documentFormattingProvider)
  (add-to-list 'eglot-ignored-server-capabilities :documentOnTypeFormattingProvider))

(defun language-hook-rust ()
  "Hook on Rust language"
  (eglot-ensure))

;; Setup LSPs (EGLOT)
(use-package eglot
  :ensure t
  :config
  ;; Set C/C++ hoooks
  (add-hook 'c-mode-hook 'language-hook-c)
  (add-hook 'c++-mode-hook 'language-hook-c)
  (add-hook 'c-or-c++-mode-hook 'language-hook-c)
  (add-hook 'rust-mode-hook 'language-hook-rust))

;;; init.el ends here
